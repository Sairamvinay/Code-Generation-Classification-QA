ndarray(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)
ndarray.all(axis=None, out=None, keepdims=False)
ndarray.any(axis=None, out=None, keepdims=False)
ndarray.any(axis=None, out=None, keepdims=False)
ndarray.argmax(axis=None, out=None)
ndarray.argmin(axis=None, out=None)
ndarray.argpartition(kth, axis=-1, kind='introselect', order=None)
ndarray.argsort(axis=-1, kind=None, order=None)
ndarray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)
ndarray.byteswap(inplace=False)
ndarray.choose(choices, out=None, mode='raise')
ndarray.clip(min=None, max=None, out=None, **kwargs)
ndarray.compress(condition, axis=None, out=None)
ndarray.conj()
ndarray.conjugate()
ndarray.copy(order='C')
ndarray.cumprod(axis=None, dtype=None, out=None)
ndarray.cumsum(axis=None, dtype=None, out=None)
ndarray.diagonal(offset=0, axis1=0, axis2=1)
ndarray.dot(b, out=None)
ndarray.dump(file)
ndarray.dumps()
ndarray.fill(value)
ndarray.flatten(order='C')
ndarray.getfield(dtype, offset=0)
ndarray.item(*args)
ndarray.itemset(*args)
ndarray.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)
ndarray.mean(axis=None, dtype=None, out=None, keepdims=False)
ndarray.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)
ndarray.newbyteorder(new_order='S')
ndarray.nonzero()
ndarray.partition(kth, axis=-1, kind='introselect', order=None)
ndarray.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)
ndarray.ptp(axis=None, out=None, keepdims=False)
ndarray.put(indices, values, mode='raise')
ndarray.ravel([order])
ndarray.repeat(repeats, axis=None)
ndarray.reshape(shape, order='C')
ndarray.resize(new_shape, refcheck=True)
ndarray.round(decimals=0, out=None)
ndarray.searchsorted(v, side='left', sorter=None)
ndarray.setfield(val, dtype, offset=0)
ndarray.setflags(write=None, align=None, uic=None)
ndarray.sort(axis=-1, kind=None, order=None)
ndarray.squeeze(axis=None)
ndarray.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False)
ndarray.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)
ndarray.swapaxes(axis1, axis2)
ndarray.take(indices, axis=None, out=None, mode='raise')
ndarray.tobytes(order='C')
ndarray.tofile(fid, sep="", format="%s")
ndarray.tolist()
ndarray.tostring(order='C')
ndarray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
ndarray.transpose(*axes)
ndarray.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False)
ndarray.view([dtype][, type])
ndarray.flags
ndarray.shape
ndarray.strides
ndarray.ndim
ndarray.data
ndarray.size
ndarray.itemsize
ndarray.nbytes
ndarray.base
ndarray.dtype
ndarray.T
ndarray.real
ndarray.imag
ndarray.flat
ndarray.ctypes
ndarray.__lt__(self, value, /)
ndarray.__le__(self, value, /)
ndarray.__gt__(self, value, /)
ndarray.__ge__(self, value, /)
ndarray.__eq__(self, value, /)
ndarray.__ne__(self, value, /)
ndarray.__bool__(self, /)
ndarray.__neg__(self, /)
ndarray.__pos__(self, /)
ndarray.__abs__(self)
ndarray.__invert__(self, /)
ndarray.__add__(self, value, /)
ndarray.__sub__(self, value, /)
ndarray.__mul__(self, value, /)
ndarray.__truediv__(self, value, /)
ndarray.__floordiv__(self, value, /)
ndarray.__mod__(self, value, /)
ndarray.__divmod__(self, value, /)
ndarray.__pow__(self, value, mod=None, /)
ndarray.__lshift__(self, value, /)
ndarray.__rshift__(self, value, /)
ndarray.__and__(self, value, /)
ndarray.__or__(self, value, /)
ndarray.__xor__(self, value, /)
ndarray.__iadd__(self, value, /)
ndarray.__isub__(self, value, /)
ndarray.__imul__(self, value, /)
ndarray.__itruediv__(self, value, /)
ndarray.__ifloordiv__(self, value, /)
ndarray.__imod__(self, value, /)
ndarray.__ipow__(self, value, /)
ndarray.__ilshift__(self, value, /)
ndarray.__irshift__(self, value, /)
ndarray.__iand__(self, value, /)
ndarray.__ior__(self, value, /)
ndarray.__ixor__(self, value, /)
ndarray.__matmul__(self, value, /)
ndarray.__copy__()
ndarray.__deepcopy__()
ndarray.__reduce__()
ndarray.__setstate__(state, /)
ndarray.__new__(*args, **kwargs)
ndarray.__array__()
ndarray.__array_wrap__()
ndarray.__len__(self, /)
ndarray.__getitem__(self, key, /)
ndarray.__setitem__(self, key, value, /)
ndarray.__contains__(self, key, /)
ndarray.__int__(self)
ndarray.__float__(self)
ndarray.__complex__()
ndarray.__str__(self, /)
ndarray.__repr__(self, /)
generic.flags
generic.shape
generic.strides
generic.ndim
generic.data
generic.size
generic.itemsize
generic.base
generic.dtype
generic.real
generic.imag
generic.flat
generic.T
generic.__array_interface__
generic.__array_struct__
generic.__array_priority__
generic.__array_wrap__()
generic
generic.all()
generic.any()
generic.argmax()
generic.argmin()
generic.argsort()
generic.astype()
generic.byteswap()
generic.choose()
generic.clip()
generic.compress()
generic.conjugate()
generic.copy()
generic.cumprod()
generic.cumsum()
generic.diagonal()
generic.dump()
generic.dumps()
generic.fill()
generic.flatten()
generic.getfield()
generic.item()
generic.itemset()
generic.max()
generic.mean()
generic.min()
generic.newbyteorder(new_order='S')
generic.nonzero()
generic.prod()
generic.ptp()
generic.put()
generic.ravel()
generic.repeat()
generic.reshape()
generic.resize()
generic.round()
generic.searchsorted()
generic.setfield()
generic.setflags()
generic.sort()
generic.squeeze()
generic.std()
generic.sum()
generic.swapaxes()
generic.take()
generic.tofile()
generic.tolist()
generic.tostring()
generic.trace()
generic.transpose()
generic.var()
generic.view()
generic.__array__()
generic.__reduce__()
generic.__setstate__()
dtype(obj, align=False, copy=False)
dtype.newbyteorder(new_order='S')
dtype.type
dtype.kind
dtype.char
dtype.num
dtype.str
dtype.name
dtype.itemsize
dtype.byteorder
dtype.fields
dtype.names
dtype.subdtype
dtype.shape
dtype.hasobject
dtype.flags
dtype.isbuiltin
dtype.isnative
dtype.descr
dtype.alignment
dtype.base
dtype.__reduce__()
dtype.__setstate__()
matrix.T
matrix.H
matrix.I
matrix.A
matrix(data, dtype=None, copy=True)
matrix.all(self, axis=None, out=None)
matrix.any(self, axis=None, out=None)
matrix.argmax(self, axis=None, out=None)
matrix.argmin(self, axis=None, out=None)
matrix.argpartition(kth, axis=-1, kind='introselect', order=None)
matrix.argsort(axis=-1, kind=None, order=None)
matrix.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)
matrix.byteswap(inplace=False)
matrix.choose(choices, out=None, mode='raise')
matrix.clip(min=None, max=None, out=None, **kwargs)
matrix.compress(condition, axis=None, out=None)
matrix.conj()
matrix.conjugate()
matrix.copy(order='C')
matrix.cumprod(axis=None, dtype=None, out=None)
matrix.cumsum(axis=None, dtype=None, out=None)
matrix.diagonal(offset=0, axis1=0, axis2=1)
matrix.dot(b, out=None)
matrix.dump(file)
matrix.dumps()
matrix.fill(value)
matrix.flatten(self, order='C')
matrix.getA(self)
matrix.getA1(self)
matrix.getH(self)
matrix.getI(self)
matrix.getT(self)
matrix.getfield(dtype, offset=0)
matrix.item(*args)
matrix.itemset(*args)
matrix.max(self, axis=None, out=None)
matrix.mean(self, axis=None, dtype=None, out=None)
matrix.min(self, axis=None, out=None)
matrix.newbyteorder(new_order='S')
matrix.nonzero()
matrix.partition(kth, axis=-1, kind='introselect', order=None)
matrix.prod(self, axis=None, dtype=None, out=None)
matrix.ptp(self, axis=None, out=None)
matrix.put(indices, values, mode='raise')
matrix.ravel(self, order='C')
matrix.repeat(repeats, axis=None)
matrix.reshape(shape, order='C')
matrix.resize(new_shape, refcheck=True)
matrix.round(decimals=0, out=None)
matrix.searchsorted(v, side='left', sorter=None)
matrix.setfield(val, dtype, offset=0)
matrix.setflags(write=None, align=None, uic=None)
matrix.sort(axis=-1, kind=None, order=None)
matrix.squeeze(self, axis=None)
matrix.std(self, axis=None, dtype=None, out=None, ddof=0)
matrix.sum(self, axis=None, dtype=None, out=None)
matrix.swapaxes(axis1, axis2)
matrix.take(indices, axis=None, out=None, mode='raise')
matrix.tobytes(order='C')
matrix.tofile(fid, sep="", format="%s")
matrix.tolist(self)
matrix.tostring(order='C')
matrix.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
matrix.transpose(*axes)
matrix.var(self, axis=None, dtype=None, out=None, ddof=0)
matrix.view([dtype][, type])
asmatrix(data, dtype=None)
bmat(obj, ldict=None, gdict=None)
memmap
flush(self)
chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None)
chararray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)
chararray.argsort(axis=-1, kind=None, order=None)
chararray.copy(order='C')
chararray.count(self, sub, start=0, end=None)
chararray.decode(self, encoding=None, errors=None)
chararray.dump(file)
chararray.dumps()
chararray.encode(self, encoding=None, errors=None)
chararray.endswith(self, suffix, start=0, end=None)
chararray.expandtabs(self, tabsize=8)
chararray.fill(value)
chararray.find(self, sub, start=0, end=None)
chararray.flatten(order='C')
chararray.getfield(dtype, offset=0)
chararray.index(self, sub, start=0, end=None)
chararray.isalnum(self)
chararray.isalpha(self)
chararray.isdecimal(self)
chararray.isdigit(self)
chararray.islower(self)
chararray.isnumeric(self)
chararray.isspace(self)
chararray.istitle(self)
chararray.isupper(self)
chararray.item(*args)
chararray.join(self, seq)
chararray.ljust(self, width, fillchar=' ')
chararray.lower(self)
chararray.lstrip(self, chars=None)
chararray.nonzero()
chararray.put(indices, values, mode='raise')
chararray.ravel([order])
chararray.repeat(repeats, axis=None)
chararray.replace(self, old, new, count=None)
chararray.reshape(shape, order='C')
chararray.resize(new_shape, refcheck=True)
chararray.rfind(self, sub, start=0, end=None)
chararray.rindex(self, sub, start=0, end=None)
chararray.rjust(self, width, fillchar=' ')
chararray.rsplit(self, sep=None, maxsplit=None)
chararray.rstrip(self, chars=None)
chararray.searchsorted(v, side='left', sorter=None)
chararray.setfield(val, dtype, offset=0)
chararray.setflags(write=None, align=None, uic=None)
chararray.sort(axis=-1, kind=None, order=None)
chararray.split(self, sep=None, maxsplit=None)
chararray.splitlines(self, keepends=None)
chararray.squeeze(axis=None)
chararray.startswith(self, prefix, start=0, end=None)
chararray.strip(self, chars=None)
chararray.swapaxes(axis1, axis2)
chararray.swapcase(self)
chararray.take(indices, axis=None, out=None, mode='raise')
chararray.title(self)
chararray.tofile(fid, sep="", format="%s")
chararray.tolist()
chararray.tostring(order='C')
chararray.translate(self, table, deletechars=None)
chararray.transpose(*axes)
chararray.upper(self)
chararray.view([dtype][, type])
chararray.zfill(self, width)
core.defchararray.array(obj, itemsize=None, copy=True, unicode=None, order=None)
recarray
recarray.all(axis=None, out=None, keepdims=False)
recarray.any(axis=None, out=None, keepdims=False)
recarray.argmax(axis=None, out=None)
recarray.argmin(axis=None, out=None)
recarray.argpartition(kth, axis=-1, kind='introselect', order=None)
recarray.argsort(axis=-1, kind=None, order=None)
recarray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)
recarray.byteswap(inplace=False)
recarray.choose(choices, out=None, mode='raise')
recarray.clip(min=None, max=None, out=None, **kwargs)
recarray.compress(condition, axis=None, out=None)
recarray.conj()
recarray.conjugate()
recarray.copy(order='C')
recarray.cumprod(axis=None, dtype=None, out=None)
recarray.cumsum(axis=None, dtype=None, out=None)
recarray.diagonal(offset=0, axis1=0, axis2=1)
recarray.dot(b, out=None)
recarray.dump(file)
recarray.dumps()
recarray.fill(value)
recarray.flatten(order='C')
recarray.getfield(dtype, offset=0)
recarray.item(*args)
recarray.itemset(*args)
recarray.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)
recarray.mean(axis=None, dtype=None, out=None, keepdims=False)
recarray.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)
recarray.newbyteorder(new_order='S')
recarray.nonzero()
recarray.partition(kth, axis=-1, kind='introselect', order=None)
recarray.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)
recarray.ptp(axis=None, out=None, keepdims=False)
recarray.put(indices, values, mode='raise')
recarray.ravel([order])
recarray.repeat(repeats, axis=None)
recarray.reshape(shape, order='C')
recarray.resize(new_shape, refcheck=True)
recarray.round(decimals=0, out=None)
recarray.searchsorted(v, side='left', sorter=None)
recarray.setfield(val, dtype, offset=0)
recarray.setflags(write=None, align=None, uic=None)
recarray.sort(axis=-1, kind=None, order=None)
recarray.squeeze(axis=None)
recarray.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False)
recarray.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)
recarray.swapaxes(axis1, axis2)
recarray.take(indices, axis=None, out=None, mode='raise')
recarray.tobytes(order='C')
recarray.tofile(fid, sep="", format="%s")
recarray.tolist()
recarray.tostring(order='C')
recarray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
recarray.transpose(*axes)
recarray.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False)
recarray.view([dtype][, type])
record
record.all()
record.any()
record.argmax()
record.argmin()
record.argsort()
record.astype()
record.byteswap()
record.choose()
record.clip()
record.compress()
record.conjugate()
record.copy()
record.cumprod()
record.cumsum()
record.diagonal()
record.dump()
record.dumps()
record.fill()
record.flatten()
record.getfield()
record.item()
record.itemset()
record.max()
record.mean()
record.min()
record.newbyteorder(new_order='S')
record.nonzero()
record.pprint(self)
record.prod()
record.ptp()
record.put()
record.ravel()
record.repeat()
record.reshape()
record.resize()
record.round()
record.searchsorted()
record.setfield()
record.setflags()
record.sort()
record.squeeze()
record.std()
record.sum()
record.swapaxes()
record.take()
record.tofile()
record.tolist()
record.tostring()
record.trace()
record.transpose()
record.var()
record.view()
lib.user_array.container(data, dtype=None, copy=True)
ndenumerate(arr)
broadcast
broadcast.reset()
ma.array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0)
ma.masked_array
ma.asarray(a, dtype=None, order=None)
ma.asanyarray(a, dtype=None)
ma.fix_invalid(a, mask=False, copy=True, fill_value=None)
ma.masked_equal(x, value, copy=True)
ma.masked_greater(x, value, copy=True)
ma.masked_greater_equal(x, value, copy=True)
ma.masked_inside(x, v1, v2, copy=True)
ma.masked_invalid(a, copy=True)
ma.masked_less(x, value, copy=True)
ma.masked_less_equal(x, value, copy=True)
ma.masked_not_equal(x, value, copy=True)
ma.masked_object(x, value, copy=True, shrink=True)
ma.masked_outside(x, v1, v2, copy=True)
ma.masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True)
ma.masked_where(condition, a, copy=True)
ma.masked
ma.nomask
ma.masked_print_options
ma.MaskedArray.base
ma.MaskedArray.ctypes
ma.MaskedArray.dtype
ma.MaskedArray.flags
ma.MaskedArray.itemsize
ma.MaskedArray.nbytes
ma.MaskedArray.ndim
ma.askedArray.shape
ma.MaskedArray.size
ma.MaskedArray.strides
ma.MaskedArray.imag
ma.MaskedArray.real
ma.MaskedArray.flat
ma.MaskedArray.__array_priority__ = 15
ma.MaskedArray.__float__(self)
ma.MaskedArray.__int__(self)
ma.MaskedArray.view(self, dtype=None, type=None, fill_value=None)
ma.MaskedArray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)
ma.MaskedArray.byteswap(inplace=False)
ma.MaskedArray.compressed(self)
ma.MaskedArray.filled(self, fill_value=None)
ma.MaskedArray.tofile(self, fid, sep='', format='%s')
ma.MaskedArray.toflex(self)
ma.MaskedArray.tolist(self, fill_value=None)
ma.MaskedArray.torecords(self)
ma.MaskedArray.tostring(self, fill_value=None, order='C')
ma.MaskedArray.tobytes(self, fill_value=None, order='C')
ma.MaskedArray.flatten(order='C')
ma.MaskedArray.ravel(self, order='C')
ma.MaskedArray.reshape(self, *s, **kwargs)
ma.MaskedArray.resize(self, newshape, refcheck=True, order=False)
ma.MaskedArray.squeeze(axis=None)
ma.MaskedArray.swapaxes(axis1, axis2)
ma.MaskedArray.transpose(*axes)
ma.MaskedArray.T
ma.MaskedArray.argmax(self, axis=None, fill_value=None, out=None)
ma.MaskedArray.argmin(self, axis=None, fill_value=None, out=None)
ma.MaskedArray.argsort(self, axis=<no value>, kind=None, order=None, endwith=True, fill_value=None)
ma.MaskedArray.choose(choices, out=None, mode='raise')
ma.MaskedArray.compress(self, condition, axis=None, out=None)
ma.MaskedArray.diagonal(offset=0, axis1=0, axis2=1)
ma.MaskedArray.fill(value)
ma.MaskedArray.item(*args)
ma.MaskedArray.nonzero(self)
ma.MaskedArray.put(self, indices, values, mode='raise')
ma.MaskedArray.repeat(repeats, axis=None)
ma.MaskedArray.searchsorted(v, side='left', sorter=None)
ma.MaskedArray.sort(self, axis=-1, kind=None, order=None, endwith=True, fill_value=None)
ma.MaskedArray.take(self, indices, axis=None, out=None, mode='raise')
ma.MaskedArray.copy(order='C')
ma.MaskedArray.dump(file)
ma.MaskedArray.dumps()
ma.MaskedArray.all(self, axis=None, out=None, keepdims=<no value>)
ma.MaskedArray.anom(self, axis=None, dtype=None)
ma.MaskedArray.any(self, axis=None, out=None, keepdims=<no value>)
ma.MaskedArray.clip(min=None, max=None, out=None, **kwargs)
ma.MaskedArray.conj()
ma.MaskedArray.conjugate()
ma.MaskedArray.cumprod(self, axis=None, dtype=None, out=None)
ma.MaskedArray.cumsum(self, axis=None, dtype=None, out=None)
ma.MaskedArray.max(self, axis=None, out=None, fill_value=None, keepdims=<no value>)
ma.MaskedArray.mean(self, axis=None, dtype=None, out=None, keepdims=<no value>)
ma.MaskedArray.min(self, axis=None, out=None, fill_value=None, keepdims=<no value>)
ma.MaskedArray.prod(self, axis=None, dtype=None, out=None, keepdims=<no value>)
ma.MaskedArray.product(self, axis=None, dtype=None, out=None, keepdims=<no value>)
ma.MaskedArray.ptp(self, axis=None, out=None, fill_value=None, keepdims=False)
ma.MaskedArray.round(self, decimals=0, out=None)
ma.MaskedArray.std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)
ma.MaskedArray.sum(self, axis=None, dtype=None, out=None, keepdims=<no value>)
ma.MaskedArray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
ma.MaskedArray.var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)
ma.MaskedArray.__lt__(self, value, /)
ma.MaskedArray.__le__(self, value, /)
ma.MaskedArray.__gt__(self, value, /)
ma.MaskedArray.__ge__(self, value, /)
ma.MaskedArray.__eq__(self, other)
ma.MaskedArray.__ne__(self, other)
ma.MaskedArray.__bool__(self, /)
ma.MaskedArray.__abs__(self)
ma.MaskedArray.__add__(self, other)
ma.MaskedArray.__radd__(self, other)
ma.MaskedArray.__sub__(self, other)
ma.MaskedArray.__rsub__(self, other)
ma.MaskedArray.__mul__(self, other)
ma.MaskedArray.__rmul__(self, other)
ma.MaskedArray.__div__(self, other)
ma.MaskedArray.__truediv__(self, other)
ma.MaskedArray.__rtruediv__(self, other)
ma.MaskedArray.__floordiv__(self, other)
ma.MaskedArray.__rfloordiv__(self, other)
ma.MaskedArray.__mod__(self, value, /)
ma.MaskedArray.__rmod__(self, value, /)
ma.MaskedArray.__divmod__(self, value, /)
ma.MaskedArray.__rdivmod__(self, value, /)
ma.MaskedArray.__pow__(self, other)
ma.MaskedArray.__rpow__(self, other)
ma.MaskedArray.__lshift__(self, value, /)
ma.MaskedArray.__rlshift__(self, value, /)
ma.MaskedArray.__rshift__(self, value, /)
ma.MaskedArray.__rrshift__(self, value, /)
ma.MaskedArray.__and__(self, value, /)
ma.MaskedArray.__rand__(self, value, /)
ma.MaskedArray.__or__(self, value, /)
ma.MaskedArray.__ror__(self, value, /)
ma.MaskedArray.__xor__(self, value, /)
ma.MaskedArray.__rxor__(self, value, /)
ma.MaskedArray.__iadd__(self, other)
ma.MaskedArray.__isub__(self, other)
ma.MaskedArray.__imul__(self, other)
ma.MaskedArray.__idiv__(self, other)
ma.MaskedArray.__itruediv__(self, other)
ma.MaskedArray.__ifloordiv__(self, other)
ma.MaskedArray.__imod__(self, value, /)
ma.MaskedArray.__ipow__(self, other)
ma.MaskedArray.__ilshift__(self, value, /)
ma.MaskedArray.__irshift__(self, value, /)
ma.MaskedArray.__iand__(self, value, /)
ma.MaskedArray.__ior__(self, value, /)
ma.MaskedArray.__ixor__(self, value, /)
ma.MaskedArray.__repr__(self)
ma.MaskedArray.__str__(self)
ma.MaskedArray.ids(self)
ma.MaskedArray.iscontiguous(self)
ma.MaskedArray.__copy__()
ma.MaskedArray.__deepcopy__(self, memo=None)
ma.MaskedArray.__getstate__(self)
ma.MaskedArray.__reduce__(self)
ma.MaskedArray.__setstate__(self, state)
ma.MaskedArray.__new__(cls, data=None, mask=False, dtype=None, copy=False, subok=True, ndmin=0, fill_value=None, keep_mask=True, hard_mask=None, shrink=True, order=None, **options)
ma.MaskedArray.__array__()
ma.MaskedArray.__array_wrap__(self, obj, context=None)
ma.MaskedArray.__len__(self, /)
ma.MaskedArray.__getitem__(self, indx)
ma.MaskedArray.__setitem__(self, indx, value)
ma.MaskedArray.__delitem__(self, key, /)
ma.MaskedArray.__contains__(self, key, /)
ma.MaskedArray.__setmask__(self, mask, copy=False)
ma.MaskedArray.harden_mask(self)
ma.MaskedArray.soften_mask(self)
ma.MaskedArray.unshare_mask(self)
ma.MaskedArray.shrink_mask(self)
ma.MaskedArray.get_fill_value(self)
ma.MaskedArray.set_fill_value(self, value=None)
ma.MaskedArray.count(self, axis=None, keepdims=<no value>)
ma.MaskedArray.count(self, axis=None, keepdims=<no value>)
ma.MaskType
ma.copy(self, *args, **params) a.copy(order='C') = <np.ma.core._frommethod object>
ma.frombuffer(buffer, dtype=float, count=-1, offset=0) = <np.ma.core._convert2ma object>
ma.fromfunction(function, shape, **dtype) = <np.ma.core._convert2ma object>
ma.empty(shape, dtype=float, order='C') = <np.ma.core._convert2ma object>
ma.empty_like(prototype, dtype=None, order='K', subok=True, shape=None) = <np.ma.core._convert2ma object>
ma.masked_all(shape, dtype=<class 'float'>)
ma.masked_all_like(arr)
ma.ones(shape, dtype=None, order='C') = <np.ma.core._convert2ma object>
ma.zeros(shape, dtype=float, order='C') = <np.ma.core._convert2ma object>
ma.all(self, axis=None, out=None, keepdims=<no value>) = <np.ma.core._frommethod object>
ma.any(self, axis=None, out=None, keepdims=<no value>) = <np.ma.core._frommethod object>
ma.count(self, axis=None, keepdims=<no value>) = <np.ma.core._frommethod object>
ma.count_masked(arr, axis=None)
ma.getmask(a)
ma.getmaskarray(arr)
ma.getdata(a, subok=True)
ma.nonzero(self) = <np.ma.core._frommethod object>
ma.shape(obj)
ma.size(obj, axis=None)
ma.is_masked(x)
ma.is_mask(m)
ma.ravel(self, order='C') = <np.ma.core._frommethod object>
ma.reshape(a, new_shape, order='C')
ma.resize(x, new_shape)
ma.swapaxes(self, *args, **params) a.swapaxes(axis1, axis2) = <np.ma.core._frommethod object>
ma.transpose(a, axes=None)
ma.atleast_1d(*args, **kwargs) = <np.ma.extras._fromnxfunction_allargs object>
ma.atleast_2d(*args, **kwargs) = <np.ma.extras._fromnxfunction_allargs object>
ma.atleast_3d(*args, **kwargs) = <np.ma.extras._fromnxfunction_allargs object>
ma.expand_dims(a, axis)
ma.squeeze(a, axis=None)
ma.stack(*args, **kwargs) = <np.ma.extras._fromnxfunction_seq object>
ma.column_stack(*args, **kwargs) = <np.ma.extras._fromnxfunction_seq object>
ma.concatenate(arrays, axis=0)
ma.dstack(*args, **kwargs) = <np.ma.extras._fromnxfunction_seq object>
ma.hstack(*args, **kwargs) = <np.ma.extras._fromnxfunction_seq object>
ma.hsplit(*args, **kwargs) = <np.ma.extras._fromnxfunction_single object>
ma.mr_ = <np.ma.extras.mr_class object>
ma.row_stack(*args, **kwargs) = <np.ma.extras._fromnxfunction_seq object>
ma.vstack(*args, **kwargs) = <np.ma.extras._fromnxfunction_seq object>
ma.append(a, b, axis=None)
ma.make_mask(m, copy=False, shrink=True, dtype=<class 'np.bool_'>)
ma.make_mask_none(newshape, dtype=None)
ma.mask_or(m1, m2, copy=False, shrink=True)
ma.make_mask_descr(ndtype)
ma.masked_array.mask
ma.flatnotmasked_contiguous(a)
ma.flatnotmasked_edges(a)
ma.notmasked_contiguous(a, axis=None)
ma.notmasked_edges(a, axis=None)
ma.clump_masked(a)
ma.clump_unmasked(a)
ma.mask_cols(a, axis=<no value>)
ma.mask_rowcols(a, axis=None)
ma.mask_rows(a, axis=<no value>)
ma.harden_mask(self) = <np.ma.core._frommethod object>
ma.soften_mask(self) = <np.ma.core._frommethod object>
ma.compress_cols(a)
ma.compress_rowcols(x, axis=None)
ma.compress_rows(a)
ma.compressed(x)
ma.filled(a, fill_value=None)
ma.common_fill_value(a, b)
ma.default_fill_value(obj)
ma.maximum_fill_value(obj)
ma.set_fill_value(a, fill_value)
ma.anom(self, axis=None, dtype=None) = <np.ma.core._frommethod object>
ma.anomalies(self, axis=None, dtype=None) = <np.ma.core._frommethod object>
ma.average(a, axis=None, weights=None, returned=False)
ma.conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <np.ma.core._MaskedUnaryOperation object>
ma.corrcoef(x, y=None, rowvar=True, bias=<no value>, allow_masked=True, ddof=<no value>)
ma.cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None)
ma.cumsum(self, axis=None, dtype=None, out=None) = <np.ma.core._frommethod object>
ma.cumprod(self, axis=None, dtype=None, out=None) = <np.ma.core._frommethod object>
ma.mean(self, axis=None, dtype=None, out=None, keepdims=<no value>) = <np.ma.core._frommethod object>
ma.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)
ma.power(a, b, third=None)
ma.prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) = <np.ma.core._frommethod object>
ma.std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) = <np.ma.core._frommethod object>
ma.sum(self, axis=None, dtype=None, out=None, keepdims=<no value>) = <np.ma.core._frommethod object>
ma.var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) = <np.ma.core._frommethod object>
ma.argmax(self, axis=None, fill_value=None, out=None) = <np.ma.core._frommethod object>
ma.argmin(self, axis=None, fill_value=None, out=None) = <np.ma.core._frommethod object>
ma.max(obj, axis=None, out=None, fill_value=None, keepdims=<no value>)
ma.min(obj, axis=None, out=None, fill_value=None, keepdims=<no value>)
ma.ptp(obj, axis=None, out=None, fill_value=None, keepdims=<no value>)
ma.argsort(a, axis=<no value>, kind=None, order=None, endwith=True, fill_value=None)
ma.sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None)
ma.diag(v, k=0)
ma.dot(a, b, strict=False, out=None)
ma.identity(n, dtype=None) = <np.ma.core._convert2ma object>
ma.inner(a, b)
ma.innerproduct(a, b)
ma.outer(a, b)
ma.outerproduct(a, b)
ma.trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None) a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None) = <np.ma.core._frommethod object>
ma.vander(x, n=None)
ma.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)
ma.around(a, *args, **kwargs) = <np.ma.core._MaskedUnaryOperation object>
ma.clip(a, a_min, a_max, out=None, **kwargs)
ma.round(a, decimals=0, out=None)
ma.allequal(a, b, fill_value=True)
ma.allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08)
ma.apply_along_axis(func1d, axis, arr, *args, **kwargs)
ma.apply_over_axes(func, a, axes)
ma.arange([start, ]stop, [step, ]dtype=None) = <np.ma.core._convert2ma object>
ma.choose(indices, choices, out=None, mode='raise')
ma.ediff1d(arr, to_end=None, to_begin=None)
ma.indices(dimensions, dtype=<class 'int'>, sparse=False)
ma.where(condition, x=<no value>, y=<no value>)
Inf
Infinity
NAN
NINF
NZERO
NaN
PINF
PZERO
e
euler_gamma
inf
infty
nan
newaxis
pi
setbufsize(size)
seterr(all=None, divide=None, over=None, under=None, invalid=None)
seterrcall(func)
ufunc.nin
ufunc.nout
ufunc.nargs
ufunc.ntypes
ufunc.types
ufunc.identity
ufunc.signature
ufunc.reduce(a, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)
ufunc.accumulate(array, axis=0, dtype=None, out=None)
ufunc.reduceat(a, indices, axis=0, dtype=None, out=None)
ufunc.outer(A, B, **kwargs)
ufunc.at(a, indices, b=None)
array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0)
empty(shape, dtype=float, order='C')
empty_like(prototype, dtype=None, order='K', subok=True, shape=None)
eye(N, M=None, k=0, dtype=<class 'float'>, order='C')
identity(n, dtype=None)
ones(shape, dtype=None, order='C')
ones_like(a, dtype=None, order='K', subok=True, shape=None)
zeros(shape, dtype=float, order='C')
zeros_like(a, dtype=None, order='K', subok=True, shape=None)
full(shape, fill_value, dtype=None, order='C')
full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None)
asarray(a, dtype=None, order=None)
asanyarray(a, dtype=None, order=None)
ascontiguousarray(a, dtype=None)
copy(a, order='K', subok=False)
frombuffer(buffer, dtype=float, count=-1, offset=0)
fromfile(file, dtype=float, count=-1, sep='', offset=0)
fromfunction(function, shape, *, dtype=<class 'float'>, **kwargs)
fromiter(iterable, dtype, count=-1)
fromstring(string, dtype=float, count=-1, sep='')
loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None)
core.records.array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True)
core.records.fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)
core.records.fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)
core.records.fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None)
core.records.fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None)
core.defchararray.asarray(obj, itemsize=None, unicode=None, order=None)
arange([start, ]stop, [step, ]dtype=None)
linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)
logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0)
geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0)
meshgrid(*xi, copy=True, sparse=False, indexing='xy')
mgrid = <np.lib.index_tricks.MGridClass object>
ogrid = <np.lib.index_tricks.OGridClass object>
diag(v, k=0)
diagflat(v, k=0)
tri(N, M=None, k=0, dtype=<class 'float'>)
tril(m, k=0)
triu(m, k=0)
vander(x, N=None, increasing=False)
mat(data, dtype=None)
copyto(dst, src, casting='same_kind', where=True)
shape(a)
reshape(a, newshape, order='C')
ravel(a, order='C')
moveaxis(a, source, destination)
rollaxis(a, axis, start=0)
swapaxes(a, axis1, axis2)
transpose(a, axes=None)
atleast_1d(*arys)
atleast_2d(*arys)
atleast_3d(*arys)
broadcast_to(array, shape, subok=False)
broadcast_arrays(*args, subok=False)
expand_dims(a, axis)
squeeze(a, axis=None)
asfarray(a, dtype=<class 'np.float64'>)
asfortranarray(a, dtype=None)
asarray_chkfinite(a, dtype=None, order=None)
asscalar(a)
require(a, dtype=None, requirements=None)
concatenate((a1, a2, ...), axis=0, out=None)
stack(arrays, axis=0, out=None)
block(arrays)
vstack(tup)
hstack(tup)
dstack(tup)
column_stack(tup)
split(ary, indices_or_sections, axis=0)
array_split(ary, indices_or_sections, axis=0)
dsplit(ary, indices_or_sections)
hsplit(ary, indices_or_sections)
vsplit(ary, indices_or_sections)
tile(A, reps)
repeat(a, repeats, axis=None)
delete(arr, obj, axis=None)
insert(arr, obj, values, axis=None)
append(arr, values, axis=None)
resize(a, new_shape)
trim_zeros(filt, trim='fb')
unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)
flip(m, axis=None)
fliplr(m)
flipud(m)
roll(a, shift, axis=None)
rot90(m, k=1, axes=(0, 1))
bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'bitwise_and'>
bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'bitwise_or'>
bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'bitwise_xor'>
invert(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'invert'>
left_shift(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'left_shift'>
right_shift(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'right_shift'>
packbits(a, axis=None, bitorder='big')
unpackbits(a, axis=None, count=None, bitorder='big')
binary_repr(num, width=None)
char.add(x1, x2)
char.multiply(a, i)
char.mod(a, values)
char.capitalize(a)
char.center(a, width, fillchar=' ')
char.decode(a, encoding=None, errors=None)
char.encode(a, encoding=None, errors=None)
char.expandtabs(a, tabsize=8)
char.join(sep, seq)
char.ljust(a, width, fillchar=' ')
char.lower(a)
char.lstrip(a, chars=None)
char.partition(a, sep)
char.replace(a, old, new, count=None)
char.rjust(a, width, fillchar=' ')
char.rpartition(a, sep)
char.rsplit(a, sep=None, maxsplit=None)
char.rstrip(a, chars=None)
char.split(a, sep=None, maxsplit=None)
char.splitlines(a, keepends=None)
char.strip(a, chars=None)
char.swapcase(a)
char.title(a)
char.translate(a, table, deletechars=None)
char.upper(a)
char.zfill(a, width)
char.equal(x1, x2)
char.not_equal(x1, x2)
char.greater_equal(x1, x2)
char.less_equal(x1, x2)
char.greater(x1, x2)
char.less(x1, x2)
char.compare_chararrays(a, b, cmp_op, rstrip)
char.count(a, sub, start=0, end=None)
char.endswith(a, suffix, start=0, end=None)
char.find(a, sub, start=0, end=None)
char.index(a, sub, start=0, end=None)
char.isalpha(a)
char.isalnum(a)
char.isdecimal(a)
char.isdigit(a)
char.islower(a)
char.isnumeric(a)
char.isspace(a)
char.istitle(a)
char.isupper(a)
char.rfind(a, sub, start=0, end=None)
char.rindex(a, sub, start=0, end=None)
char.startswith(a, prefix, start=0, end=None)
char.str_len(a)
char.array(obj, itemsize=None, copy=True, unicode=None, order=None)
char.asarray(obj, itemsize=None, unicode=None, order=None)
char.chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None)
char.chararray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)
char.chararray.argsort(axis=-1, kind=None, order=None)
char.chararray.copy(order='C')
char.chararray.count(self, sub, start=0, end=None)
char.chararray.decode(self, encoding=None, errors=None)
char.chararray.dump(file)
char.chararray.dumps()
char.chararray.encode(self, encoding=None, errors=None)
char.chararray.endswith(self, suffix, start=0, end=None)
char.chararray.expandtabs(self, tabsize=8)
char.chararray.fill(value)
char.chararray.find(self, sub, start=0, end=None)
char.chararray.flatten(order='C')
char.chararray.getfield(dtype, offset=0)
char.chararray.index(self, sub, start=0, end=None)
char.chararray.isalnum(self)
char.chararray.isalpha(self)
char.chararray.isdecimal(self)
char.chararray.isdigit(self)
char.chararray.islower(self)
char.chararray.isnumeric(self)
char.chararray.isspace(self)
char.chararray.istitle(self)
char.chararray.isupper(self)
char.chararray.item(*args)
char.chararray.join(self, seq)
char.chararray.ljust(self, width, fillchar=' ')
char.chararray.lower(self)
char.chararray.lstrip(self, chars=None)
char.chararray.nonzero()
char.chararray.put(indices, values, mode='raise')
char.chararray.ravel([order])
char.chararray.repeat(repeats, axis=None)
char.chararray.replace(self, old, new, count=None)
char.chararray.reshape(shape, order='C')
char.chararray.resize(new_shape, refcheck=True)
char.chararray.rfind(self, sub, start=0, end=None)
char.chararray.rindex(self, sub, start=0, end=None)
char.chararray.rjust(self, width, fillchar=' ')
char.chararray.rsplit(self, sep=None, maxsplit=None)
char.chararray.rstrip(self, chars=None)
char.chararray.searchsorted(v, side='left', sorter=None)
char.chararray.setfield(val, dtype, offset=0)
char.chararray.setflags(write=None, align=None, uic=None)
char.chararray.sort(axis=-1, kind=None, order=None)
char.chararray.split(self, sep=None, maxsplit=None)
char.chararray.splitlines(self, keepends=None)
char.chararray.squeeze(axis=None)
char.chararray.startswith(self, prefix, start=0, end=None)
char.chararray.strip(self, chars=None)
char.chararray.swapaxes(axis1, axis2)
char.chararray.swapcase(self)
char.chararray.take(indices, axis=None, out=None, mode='raise')
char.chararray.title(self)
char.chararray.tofile(fid, sep="", format="%s")
char.chararray.tolist()
char.chararray.tostring(order='C')
char.chararray.translate(self, table, deletechars=None)
char.chararray.transpose(*axes)
char.chararray.upper(self)chararray.view([dtype][, type])
char.chararray.zfill(self, width)
ctypeslib.as_array(obj, shape=None)
ctypeslib.as_ctypes(obj)
ctypeslib.as_ctypes_type(dtype)
ctypeslib.ctypes_load_library(*args, **kwds)
ctypeslib.load_library(libname, loader_path)
ctypeslib.ndpointer(dtype=None, ndim=None, shape=None, flags=None)
datetime_as_string(arr, unit=None, timezone='naive', casting='same_kind')
datetime_data(dtype, /)
busdaycalendar(weekmask='1111100', holidays=None)
is_busday(dates, weekmask='1111100', holidays=None, busdaycal=None, out=None)
busday_offset(dates, offsets, roll='raise', weekmask='1111100', holidays=None, busdaycal=None, out=None)
busday_count(begindates, enddates, weekmask='1111100', holidays=[], busdaycal=None, out=None)
can_cast(from_, to, casting='safe')
promote_types(type1, type2)
min_scalar_type(a)
result_type(*arrays_and_dtypes)
common_type(*arrays)
obj2sctype(rep, default=None)
format_parser(formats, names, titles, aligned=False, byteorder=None)
finfo(dtype)
iinfo(type)
MachAr(float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda>>, title='Python floating point number')
issctype(rep)
issubdtype(arg1, arg2)
issubsctype(arg1, arg2)
issubclass_(arg1, arg2)
find_common_type(array_types, scalar_types)
typename(char)
sctype2char(sctype)
mintypecode(typechars, typeset='GDFgdf', default='d')
maximum_sctype(t)
geterr()
geterrcall()
errstate(**kwargs)
errstate.__call__(self, func)
seterrobj(errobj)
geterrobj()
fft.fft(a, n=None, axis=-1, norm=None)
fft.ifft(a, n=None, axis=-1, norm=None)
fft.fft2(a, s=None, axes=(-2, -1), norm=None)
fft.ifft2(a, s=None, axes=(-2, -1), norm=None)
fft.fftn(a, s=None, axes=None, norm=None)
fft.ifftn(a, s=None, axes=None, norm=None)
fft.rfft(a, n=None, axis=-1, norm=None)
fft.irfft(a, n=None, axis=-1, norm=None)
fft.rfft2(a, s=None, axes=(-2, -1), norm=None)
fft.irfft2(a, s=None, axes=(-2, -1), norm=None)
fft.rfftn(a, s=None, axes=None, norm=None)
fft.irfftn(a, s=None, axes=None, norm=None)
fft.hfft(a, n=None, axis=-1, norm=None)
fft.ihfft(a, n=None, axis=-1, norm=None)
fft.fftfreq(n, d=1.0)
fft.rfftfreq(n, d=1.0)
fft.fftshift(x, axes=None)
fft.ifftshift(x, axes=None)
fv(rate, nper, pmt, pv, when='end')
pv(rate, nper, pmt, fv=0, when='end')
npv(rate, values)
pmt(rate, nper, pv, fv=0, when='end')
ppmt(rate, per, nper, pv, fv=0, when='end')
ipmt(rate, per, nper, pv, fv=0, when='end')
irr(values)
mirr(values, finance_rate, reinvest_rate)
nper(rate, pmt, pv, fv=0, when='end')
rate(nper, pmt, pv, fv, when='end', guess=None, tol=None, maxiter=100)
apply_along_axis(func1d, axis, arr, *args, **kwargs)
apply_over_axes(func, a, axes)
vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None)
vectorize.__call__(self, *args, **kwargs)
frompyfunc(func, nin, nout, *[, identity])
piecewise(x, condlist, funclist, *args, **kw)
lookfor(what, module=None, import_modules=True, regenerate=False, output=None)
info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='np')
source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>)
c_ = <np.lib.index_tricks.CClass object>
r_ = <np.lib.index_tricks.RClass object>
s_ = <np.lib.index_tricks.IndexExpression object>
nonzero(a)
where(condition[, x, y])
indices(dimensions, dtype=<class 'int'>, sparse=False)
ix_(*args)
ravel_multi_index(multi_index, dims, mode='raise', order='C')
unravel_index(indices, shape, order='C')
diag_indices(n, ndim=2)
diag_indices_from(arr)
mask_indices(n, mask_func, k=0)
tril_indices(n, k=0, m=None)
tril_indices_from(arr, k=0)
triu_indices(n, k=0, m=None)
triu_indices_from(arr, k=0)
take(a, indices, axis=None, out=None, mode='raise')
take_along_axis(arr, indices, axis)
choose(a, choices, out=None, mode='raise')
compress(condition, a, axis=None, out=None)
diagonal(a, offset=0, axis1=0, axis2=1)
select(condlist, choicelist, default=0)
lib.stride_tricks.as_strided(x, shape=None, strides=None, subok=False, writeable=True)
place(arr, mask, vals)
put(a, ind, v, mode='raise')
put_along_axis(arr, indices, values, axis)
putmask(a, mask, values)
fill_diagonal(a, val, wrap=False)
nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=None, buffersize=0)
nditer.close()
nditer.copy()
nditer.debug_print()
nditer.enable_external_loop()
nditer.iternext()
nditer.remove_axis(i)
nditer.remove_multi_index()
nditer.reset()
ndindex(*shape)
ndindex.ndincr(self)
nested_iters()
flatiter
flatiter.copy()
lib.Arrayterator(var, buf_size=None)
load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII')
save(file, arr, allow_pickle=True, fix_imports=True)
savez(file, *args, **kwds)
savez_compressed(file, *args, **kwds)
savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='n', header='', footer='', comments='# ', encoding=None)
genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=" !#$%&'()*+, -./:;<=>?@[\]^{|}~", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes')
fromregex(file, regexp, dtype, encoding=None)
array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None)
array_repr(arr, max_line_width=None, precision=None, suppress_small=None)
array_str(a, max_line_width=None, precision=None, suppress_small=None)
format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None)
format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None)
set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None)
get_printoptions()
set_string_function(f, repr=True)
printoptions(*args, **kwargs)
base_repr(number, base=2, padding=0)
printoptions(*args, **kwargs)
base_repr(number, base=2, padding=0)
DataSource(destpath='.')
DataSource.abspath(self, path)
DataSource.exists(self, path)
DataSource.open(self, path, mode='r', encoding=None, newline=None)
dot(a, b, out=None)
linalg.multi_dot(arrays, *, out=None)
vdot(a, b)
inner(a, b)
outer(a, b, out=None)
matmul(x1, x2, /, out=None, *, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'matmul'>
tensordot(a, b, axes=2)
einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False)
einsum_path(subscripts, *operands, optimize='greedy')
linalg.matrix_power(a, n)
kron(a, b)
linalg.cholesky(a)
linalg.qr(a, mode='reduced')
linalg.svd(a, full_matrices=True, compute_uv=True, hermitian=False)
linalg.eig(a)
linalg.eigh(a, UPLO='L')
linalg.eigvals(a)
linalg.eigvalsh(a, UPLO='L')
linalg.norm(x, ord=None, axis=None, keepdims=False)
linalg.cond(x, p=None)
linalg.det(a)
linalg.matrix_rank(M, tol=None, hermitian=False)
linalg.slogdet(a)
trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None)
linalg.solve(a, b)
linalg.tensorsolve(a, b, axes=None)
linalg.lstsq(a, b, rcond='warn')
linalg.inv(a)
linalg.pinv(a, rcond=1e-15, hermitian=False)
linalg.tensorinv(a, ind=2)
linalg.LinAlgError
all(a, axis=None, out=None, keepdims=<no value>)
any(a, axis=None, out=None, keepdims=<no value>)
isfinite(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isfinite'>
isinf(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isinf'>
isnan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isnan'>
isnat(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isnat'>
isneginf(x, out=None)
isposinf(x, out=None)
iscomplex(x)
iscomplexobj(x)
isfortran(a)
isreal(x)
isrealobj(x)
isscalar(element)
logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_and'>
logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_or'>
logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_not'>
logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_xor'>
allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)
isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)
array_equal(a1, a2, equal_nan=False)
array_equiv(a1, a2)
greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'greater'>
greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'greater_equal'>
less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'less'>
less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'less_equal'>
equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'equal'>
not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'not_equal'>
sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sin'>
cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'cos'>
tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'tan'>
arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arcsin'>
arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arccos'>
arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arctan'>
hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'hypot'>
arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arctan2'>
degrees(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'degrees'>
radians(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'radians'>
unwrap(p, discont=3.141592653589793, axis=-1)
deg2rad(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'deg2rad'>
rad2deg(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'rad2deg'>
sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sinh'>
cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'cosh'>
tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'tanh'>
arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arcsinh'>
arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arccosh'>
arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arctanh'>
around(a, decimals=0, out=None)
round_(a, decimals=0, out=None)
rint(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'rint'>
fix(x, out=None)
floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'floor'>
ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'ceil'>
trunc(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'trunc'>
prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)
sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)
nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>)
nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>)
cumprod(a, axis=None, dtype=None, out=None)
cumsum(a, axis=None, dtype=None, out=None)
nancumprod(a, axis=None, dtype=None, out=None)
nancumsum(a, axis=None, dtype=None, out=None)
diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>)
ediff1d(ary, to_end=None, to_begin=None)
gradient(f, *varargs, axis=None, edge_order=1)
cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None)
trapz(y, x=None, dx=1.0, axis=-1)
exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'exp'>
expm1(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'expm1'>
exp2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'exp2'>
log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log'>
log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log10'>
log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log2'>
log1p(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log1p'>
logaddexp(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logaddexp'>
logaddexp2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logaddexp2'>
i0(x)
sinc(x)
signbit(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'signbit'>
copysign(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'copysign'>
frexp(x, [out1, out2, ]/, [out=(None, None), ]*, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'frexp'>
ldexp(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'ldexp'>
nextafter(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'nextafter'>
spacing(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'spacing'>
lcm(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'lcm'>
gcd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'gcd'>
add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'add'>
reciprocal(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'reciprocal'>
positive(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'positive'>
negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'negative'>
multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'multiply'>
divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'true_divide'>
power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'power'>
subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'subtract'>
true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'true_divide'>
floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'floor_divide'>
float_power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'float_power'>
fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fmod'>
mod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'remainder'>
modf(x, [out1, out2, ]/, [out=(None, None), ]*, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'modf'>
remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'remainder'>
divmod(x1, x2, [out1, out2, ]/, [out=(None, None), ]*, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'divmod'>
angle(z, deg=False)
real(val)
imag(val)
conj(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'conjugate'>
conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'conjugate'>
convolve(a, v, mode='full')
clip(a, a_min, a_max, out=None, **kwargs)
sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sqrt'>
cbrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'cbrt'>
square(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'square'>
absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'absolute'>
fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fabs'>
sign(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sign'>
heaviside(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'heaviside'>
maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'maximum'>
minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'minimum'>
fmax(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fmax'>
fmin(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fmin'>
nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None)
real_if_close(a, tol=100)
interp(x, xp, fp, left=None, right=None, period=None)
matlib.empty(shape, dtype=None, order='C')
matlib.zeros(shape, dtype=None, order='C')
matlib.ones(shape, dtype=None, order='C')
matlib.eye(n, M=None, k=0, dtype=<class 'float'>, order='C')
matlib.identity(n, dtype=None)
matlib.repmat(a, m, n)
matlib.rand(*args)
matlib.randn(*args)
getbufsize()
shares_memory(a, b, max_work=None)
may_share_memory(a, b, max_work=None)
byte_bounds(a)
lib.mixins.NDArrayOperatorsMixin
lib.npVersion(vstring)
get_include()
show_config()
deprecate(*args, **kwargs)
deprecate_with_doc(msg)
who(vardict=None)
disp(mesg, device=None, linefeed=True)
pad(array, pad_width, mode='constant', **kwargs)
polynomial.polynomial.Polynomial(coef, domain=None, window=None)
polynomial.polynomial.Polynomial.__call__(self, arg)
polynomial.polynomial.Polynomial.basis(deg, domain=None, window=None)
polynomial.polynomial.Polynomial.cast(series, domain=None, window=None)
polynomial.polynomial.Polynomial.convert(self, domain=None, kind=None, window=None)
polynomial.polynomial.Polynomial.copy(self)
polynomial.polynomial.Polynomial.cutdeg(self, deg)
polynomial.polynomial.Polynomial.degree(self)
polynomial.polynomial.Polynomial.deriv(self, m=1)
polynomial.polynomial.mial.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
polynomial.polynomial.Polynomial.fromroots(roots, domain=[], window=None)
polynomial.polynomial.Polynomial.has_samecoef(self, other)
polynomial.polynomial.Polynomial.has_samedomain(self, other)
polynomial.polynomial.Polynomial.has_sametype(self, other)
polynomial.polynomial.Polynomial.has_samewindow(self, other)
polynomial.polynomial.Polynomial.identity(domain=None, window=None)
polynomial.polynomial.Polynomial.integ(self, m=1, k=[], lbnd=None)
polynomial.polynomial.Polynomial.linspace(self, n=100, domain=None)
polynomial.polynomial.Polynomial.mapparms(self)
polynomial.polynomial.Polynomial.roots(self)
polynomial.polynomial.Polynomial.trim(self, tol=0)
polynomial.polynomial.Polynomial.truncate(self, size)
polynomial.polynomial.polydomain = array([-1, 1])
polynomial.polynomial.polyzero = array([0])
polynomial.polynomial.polyone = array([1])
polynomial.polynomial.polyx = array([0, 1])
polynomial.polynomial.polyadd(c1, c2)
polynomial.polynomial.polysub(c1, c2)
polynomial.polynomial.polymulx(c)
polynomial.polynomial.polymul(c1, c2)
polynomial.polynomial.polydiv(c1, c2)
polynomial.polynomial.polypow(c, pow, maxpower=None)
polynomial.polynomial.polyval(x, c, tensor=True)
polynomial.polynomial.polyval2d(x, y, c)
polynomial.polynomial.polyval3d(x, y, z, c)
polynomial.polynomial.polygrid2d(x, y, c)
polynomial.polynomial.polygrid3d(x, y, z, c)
polynomial.polynomial.polyder(c, m=1, scl=1, axis=0)
polynomial.polynomial.polyint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
polynomial.polynomial.polyfromroots(roots)
polynomial.polynomial.polyroots(c)
polynomial.polynomial.polyvalfromroots(x, r, tensor=True)
polynomial.polynomial.polyvander(x, deg)
polynomial.polynomial.polyvander2d(x, y, deg)
polynomial.polynomial.polyvander3d(x, y, z, deg)
polynomial.polynomial.polycompanion(c)
polynomial.polynomial.polyfit(x, y, deg, rcond=None, full=False, w=None)
polynomial.polynomial.polytrim(c, tol=0)
polynomial.polynomial.polyline(off, scl)
polynomial.chebyshev.Chebyshev(coef, domain=None, window=None)
polynomial.chebyshev.Chebyshev.__call__(self, arg)
polynomial.chebyshev.Chebyshev.basis(deg, domain=None, window=None)
polynomial.chebyshev.Chebyshev.cast(series, domain=None, window=None)
polynomial.chebyshev.Chebyshev.convert(self, domain=None, kind=None, window=None)
polynomial.chebyshev.Chebyshev.copy(self)
polynomial.chebyshev.Chebyshev.cutdeg(self, deg)
polynomial.chebyshev.Chebyshev.degree(self)
polynomial.chebyshev.Chebyshev.deriv(self, m=1)
polynomial.chebyshev.Chebyshev.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
polynomial.chebyshev.Chebyshev.fromroots(roots, domain=[], window=None)
polynomial.chebyshev.Chebyshev.has_samecoef(self, other)
polynomial.chebyshev.Chebyshev.has_samedomain(self, other)
polynomial.chebyshev.Chebyshev.has_sametype(self, other)
polynomial.chebyshev.Chebyshev.has_samewindow(self, other)
polynomial.chebyshev.Chebyshev.identity(domain=None, window=None)
polynomial.chebyshev.Chebyshev.integ(self, m=1, k=[], lbnd=None)
polynomial.chebyshev.Chebyshev.interpolate(func, deg, domain=None, args=())
polynomial.chebyshev.Chebyshev.linspace(self, n=100, domain=None)
polynomial.chebyshev.Chebyshev.mapparms(self)
polynomial.chebyshev.Chebyshev.roots(self)
polynomial.chebyshev.Chebyshev.trim(self, tol=0)
polynomial.chebyshev.Chebyshev.truncate(self, size)
polynomial.chebyshev.chebdomain = array([-1, 1])
polynomial.chebyshev.chebzero = array([0])
polynomial.chebyshev.chebone = array([1])
polynomial.chebyshev.chebx = array([0, 1])
polynomial.chebyshev.chebadd(c1, c2)
polynomial.chebyshev.chebsub(c1, c2)
polynomial.chebyshev.chebmulx(c)
polynomial.chebyshev.chebmul(c1, c2)
polynomial.chebyshev.chebdiv(c1, c2)
polynomial.chebyshev.chebpow(c, pow, maxpower=16)
polynomial.chebyshev.chebval(x, c, tensor=True)
polynomial.chebyshev.chebval2d(x, y, c)
polynomial.chebyshev.chebval3d(x, y, z, c)
polynomial.chebyshev.chebgrid2d(x, y, c)
polynomial.chebyshev.chebgrid3d(x, y, z, c)
polynomial.chebyshev.chebder(c, m=1, scl=1, axis=0)
polynomial.chebyshev.chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
polynomial.chebyshev.chebfromroots(roots)
polynomial.chebyshev.chebroots(c)
polynomial.chebyshev.chebvander(x, deg)
polynomial.chebyshev.chebvander2d(x, y, deg)
polynomial.chebyshev.chebvander3d(x, y, z, deg)
polynomial.chebyshev.chebgauss(deg)
polynomial.chebyshev.chebweight(x)
polynomial.chebyshev.chebcompanion(c)
polynomial.chebyshev.chebfit(x, y, deg, rcond=None, full=False, w=None)
polynomial.chebyshev.chebpts1(npts)
polynomial.chebyshev.chebpts2(npts)
polynomial.chebyshev.chebtrim(c, tol=0)
polynomial.chebyshev.chebline(off, scl)
polynomial.chebyshev.cheb2poly(c)
polynomial.chebyshev.poly2cheb(pol)
polynomial.chebyshev.chebinterpolate(func, deg, args=())
polynomial.hermite.Hermite(coef, domain=None, window=None)
polynomial.hermite.Hermite.__call__(self, arg)
polynomial.hermite.Hermite.basis(deg, domain=None, window=None)
polynomial.hermite.Hermite.cast(series, domain=None, window=None)
polynomial.hermite.Hermite.convert(self, domain=None, kind=None, window=None)
polynomial.hermite.Hermite.copy(self)
polynomial.hermite.Hermite.cutdeg(self, deg)
polynomial.hermite.Hermite.degree(self)
polynomial.hermite.Hermite.deriv(self, m=1)
polynomial.hermite.Hermite.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
polynomial.hermite.Hermite.fromroots(roots, domain=[], window=None)
polynomial.hermite.Hermite.has_samecoef(self, other)
polynomial.hermite.Hermite.has_samedomain(self, other)
polynomial.hermite.Hermite.has_sametype(self, other)
polynomial.hermite.Hermite.has_samewindow(self, other)
polynomial.hermite.Hermite.identity(domain=None, window=None)
polynomial.hermite.Hermite.integ(self, m=1, k=[], lbnd=None)
polynomial.hermite.Hermite.linspace(self, n=100, domain=None)
polynomial.hermite.Hermite.mapparms(self)
polynomial.hermite.Hermite.roots(self)
polynomial.hermite.Hermite.trim(self, tol=0)
polynomial.hermite.Hermite.truncate(self, size)
polynomial.hermite.hermdomain = array([-1, 1])
polynomial.hermite.hermzero = array([0])
polynomial.hermite.hermone = array([1])
polynomial.hermite.hermx = array([0. , 0.5])
polynomial.hermite.hermadd(c1, c2)
polynomial.hermite.hermsub(c1, c2)
polynomial.hermite.hermmulx(c)
polynomial.hermite.hermmul(c1, c2)
polynomial.hermite.hermdiv(c1, c2)
polynomial.hermite.hermpow(c, pow, maxpower=16)
polynomial.hermite.hermval(x, c, tensor=True)
polynomial.hermite.hermval2d(x, y, c)
polynomial.hermite.hermval3d(x, y, z, c)
polynomial.hermite.hermgrid2d(x, y, c)
polynomial.hermite.hermgrid3d(x, y, z, c)
polynomial.hermite.hermder(c, m=1, scl=1, axis=0)
polynomial.hermite.hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
polynomial.hermite.hermfromroots(roots)
polynomial.hermite.hermroots(c)
polynomial.hermite.hermvander(x, deg)
polynomial.hermite.hermvander2d(x, y, deg)
polynomial.hermite.hermvander3d(x, y, z, deg)
polynomial.hermite.hermgauss(deg)
polynomial.hermite.hermweight(x)
polynomial.hermite.hermcompanion(c)
polynomial.hermite.hermfit(x, y, deg, rcond=None, full=False, w=None)
polynomial.hermite.hermtrim(c, tol=0)
polynomial.hermite.hermline(off, scl)
polynomial.hermite.herm2poly(c)
polynomial.hermite.poly2herm(pol)
polynomial.hermite_e.HermiteE(coef, domain=None, window=None)
polynomial.hermite_e.HermiteE.__call__(self, arg)
polynomial.hermite_e.HermiteE.basis(deg, domain=None, window=None)
polynomial.hermite_e.HermiteE.cast(series, domain=None, window=None)
polynomial.hermite_e.HermiteE.convert(self, domain=None, kind=None, window=None)
polynomial.hermite_e.HermiteE.copy(self)
polynomial.hermite_e.HermiteE.cutdeg(self, deg)
polynomial.hermite_e.HermiteE.degree(self)
polynomial.hermite_e.HermiteE.deriv(self, m=1)
polynomial.hermite_e.HermiteE.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
polynomial.hermite_e.HermiteE.fromroots(roots, domain=[], window=None)
polynomial.hermite_e.HermiteE.has_samecoef(self, other)
polynomial.hermite_e.HermiteE.has_samedomain(self, other)
polynomial.hermite_e.HermiteE.has_sametype(self, other)
polynomial.hermite_e.HermiteE.has_samewindow(self, other)
polynomial.hermite_e.HermiteE.identity(domain=None, window=None)
polynomial.hermite_e.HermiteE.integ(self, m=1, k=[], lbnd=None)
polynomial.hermite_e.HermiteE.linspace(self, n=100, domain=None)
polynomial.hermite_e.HermiteE.mapparms(self)
polynomial.hermite_e.HermiteE.roots(self)
polynomial.hermite_e.HermiteE.trim(self, tol=0)
polynomial.hermite_e.HermiteE.truncate(self, size)
polynomial.hermite_e.hermedomain = array([-1, 1])
polynomial.hermite_e.hermezero = array([0])
polynomial.hermite_e.hermeone = array([1])
polynomial.hermite_e.hermex = array([0, 1])
polynomial.hermite_e.hermeadd(c1, c2)
polynomial.hermite_e.hermesub(c1, c2)
polynomial.hermite_e.hermemulx(c)
polynomial.hermite_e.hermemul(c1, c2)
polynomial.hermite_e.hermediv(c1, c2)
polynomial.hermite_e.hermepow(c, pow, maxpower=16)
polynomial.hermite_e.hermeval(x, c, tensor=True)
polynomial.hermite_e.hermeval2d(x, y, c)
polynomial.hermite_e.hermeval3d(x, y, z, c)
polynomial.hermite_e.hermegrid2d(x, y, c)
polynomial.hermite_e.hermegrid3d(x, y, z, c)
polynomial.hermite_e.hermeder(c, m=1, scl=1, axis=0)
polynomial.hermite_e.hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
polynomial.hermite_e.hermefromroots(roots)
polynomial.hermite_e.hermeroots(c)
polynomial.hermite_e.hermevander(x, deg)
polynomial.hermite_e.hermevander2d(x, y, deg)
polynomial.hermite_e.hermevander3d(x, y, z, deg)
polynomial.hermite_e.hermegauss(deg)
polynomial.hermite_e.hermeweight(x)
polynomial.hermite_e.hermecompanion(c)
polynomial.hermite_e.hermefit(x, y, deg, rcond=None, full=False, w=None)
polynomial.hermite_e.hermeline(off, scl)
polynomial.hermite_e.herme2poly(c)
polynomial.hermite_e.poly2herme(pol)
polynomial.laguerre.Laguerre(coef, domain=None, window=None)
polynomial.laguerre.Laguerre.__call__(self, arg)
polynomial.laguerre.Laguerre.basis(deg, domain=None, window=None)
polynomial.laguerre.Laguerre.cast(series, domain=None, window=None)
polynomial.laguerre.Laguerre.convert(self, domain=None, kind=None, window=None)
polynomial.laguerre.Laguerre.copy(self)
polynomial.laguerre.Laguerre.cutdeg(self, deg)
polynomial.laguerre.Laguerre.degree(self)
polynomial.laguerre.Laguerre.deriv(self, m=1)
polynomial.laguerre.Laguerre.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
polynomial.laguerre.Laguerre.fromroots(roots, domain=[], window=None)
polynomial.laguerre.Laguerre.has_samecoef(self, other)
polynomial.laguerre.Laguerre.has_samedomain(self, other)
polynomial.laguerre.Laguerre.has_sametype(self, other)
polynomial.laguerre.Laguerre.has_samewindow(self, other)
polynomial.laguerre.Laguerre.identity(domain=None, window=None)
polynomial.laguerre.Laguerre.integ(self, m=1, k=[], lbnd=None)
polynomial.laguerre.Laguerre.linspace(self, n=100, domain=None)
polynomial.laguerre.Laguerre.mapparms(self)
polynomial.laguerre.Laguerre.roots(self)
polynomial.laguerre.Laguerre.trim(self, tol=0)
polynomial.laguerre.Laguerre.truncate(self, size)
polynomial.laguerre.lagdomain = array([0, 1])
polynomial.laguerre.lagzero = array([0])
polynomial.laguerre.lagone = array([1])
polynomial.laguerre.lagx = array([ 1, -1])
polynomial.laguerre.lagadd(c1, c2)
polynomial.laguerre.lagsub(c1, c2)
polynomial.laguerre.lagmulx(c)
polynomial.laguerre.lagmul(c1, c2)
polynomial.laguerre.lagdiv(c1, c2)
polynomial.laguerre.lagpow(c, pow, maxpower=16)
polynomial.laguerre.lagval(x, c, tensor=True)
polynomial.laguerre.lagval2d(x, y, c)
polynomial.laguerre.lagval3d(x, y, z, c)
polynomial.laguerre.laggrid2d(x, y, c)
polynomial.laguerre.laggrid3d(x, y, z, c)
polynomial.laguerre.lagder(c, m=1, scl=1, axis=0)
polynomial.laguerre.lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
polynomial.laguerre.lagfromroots(roots)
polynomial.laguerre.lagroots(c)
polynomial.laguerre.lagvander(x, deg)
polynomial.laguerre.lagvander2d(x, y, deg)
polynomial.laguerre.lagvander3d(x, y, z, deg)
polynomial.laguerre.laggauss(deg)
polynomial.laguerre.lagweight(x)
polynomial.laguerre.lagcompanion(c)
polynomial.laguerre.lagfit(x, y, deg, rcond=None, full=False, w=None)
polynomial.laguerre.lagtrim(c, tol=0)
polynomial.laguerre.lagline(off, scl)
polynomial.laguerre.lag2poly(c)
polynomial.laguerre.poly2lag(pol)
polynomial.legendre.Legendre(coef, domain=None, window=None)
polynomial.legendre.Legendre.__call__(self, arg)
polynomial.legendre.Legendre.basis(deg, domain=None, window=None)
polynomial.legendre.Legendre.cast(series, domain=None, window=None)
polynomial.legendre.Legendre.convert(self, domain=None, kind=None, window=None)
polynomial.legendre.Legendre.copy(self)
polynomial.legendre.Legendre.cutdeg(self, deg)
polynomial.legendre.Legendre.degree(self)
polynomial.legendre.Legendre.deriv(self, m=1)
polynomial.legendre.Legendre.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
polynomial.legendre.Legendre.fromroots(roots, domain=[], window=None)
polynomial.legendre.Legendre.has_samecoef(self, other)
polynomial.legendre.Legendre.has_samedomain(self, other)
polynomial.legendre.Legendre.has_sametype(self, other)
polynomial.legendre.Legendre.has_samewindow(self, other)
polynomial.legendre.Legendre.identity(domain=None, window=None)
polynomial.legendre.Legendre.integ(self, m=1, k=[], lbnd=None)
polynomial.legendre.Legendre.linspace(self, n=100, domain=None)
polynomial.legendre.Legendre.mapparms(self)
polynomial.legendre.Legendre.roots(self)
polynomial.legendre.Legendre.trim(self, tol=0)
polynomial.legendre.Legendre.truncate(self, size)
polynomial.legendre.legdomain = array([-1, 1])
polynomial.legendre.legzero = array([0])
polynomial.legendre.legone = array([1])
polynomial.legendre.legx = array([0, 1])
polynomial.legendre.legadd(c1, c2)
polynomial.legendre.legsub(c1, c2)
polynomial.legendre.legmulx(c)
polynomial.legendre.legmul(c1, c2)
polynomial.legendre.legdiv(c1, c2)
polynomial.legendre.legpow(c, pow, maxpower=16)
polynomial.legendre.legval(x, c, tensor=True)
polynomial.legendre.legval2d(x, y, c)
polynomial.legendre.legval3d(x, y, z, c)
polynomial.legendre.leggrid2d(x, y, c)
polynomial.legendre.leggrid3d(x, y, z, c)
polynomial.legendre.legder(c, m=1, scl=1, axis=0)
polynomial.legendre.legint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
polynomial.legendre.legfromroots(roots)
polynomial.legendre.legroots(c)
polynomial.legendre.legvander(x, deg)
polynomial.legendre.legvander2d(x, y, deg)
polynomial.legendre.legvander3d(x, y, z, deg)
polynomial.legendre.leggauss(deg)
polynomial.legendre.legweight(x)
polynomial.legendre.legcompanion(c)
polynomial.legendre.legfit(x, y, deg, rcond=None, full=False, w=None)
polynomial.legendre.legtrim(c, tol=0)
polynomial.legendre.legline(off, scl)
polynomial.legendre.leg2poly(c)
polynomial.legendre.poly2leg(pol)
polynomial.polyutils.PolyError
polynomial.polyutils.PolyDomainError
polynomial.polyutils.RankWarning
polynomial.polyutils.PolyBase
polynomial.polyutils.as_series(alist, trim=True)
polynomial.polyutils.trimseq(seq)
polynomial.polyutils.trimcoef(c, tol=0)
polynomial.polyutils.getdomain(x)
polynomial.polyutils.mapdomain(x, old, new)
polynomial.polyutils.mapparms(old, new)
poly1d(c_or_r, r=False, variable=None)
poly1d.__call__(self, val)
poly1d.deriv(self, m=1)
poly1d.integ(self, m=1, k=0)
polyval(p, x)
poly(seq_of_zeros)
roots(p)
polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)
polyder(p, m=1)
polyint(p, m=1, k=None)
polyadd(a1, a2)
polydiv(u, v)
polymul(a1, a2)
polysub(a1, a2)
RankWarning
random.default_rng()
random.Generator(bit_generator)
random.Generator.bit_generator
random.Generator.integers(low, high=None, size=None, dtype=np.int64, endpoint=False)
random.Generator.random(size=None, dtype=np.float64, out=None)
random.Generator.choice(a, size=None, replace=True, p=None, axis=0, shuffle=True)
random.Generator.bytes(length)
random.Generator.shuffle(x, axis=0)
random.Generator.permutation(x, axis=0)
random.Generator.beta(a, b, size=None)
random.Generator.binomial(n, p, size=None)
random.Generator.chisquare(df, size=None)
random.Generator.dirichlet(alpha, size=None)
random.Generator.exponential(scale=1.0, size=None)
random.Generator.f(dfnum, dfden, size=None)
random.Generator.gamma(shape, scale=1.0, size=None)
random.Generator.geometric(p, size=None)
random.Generator.gumbel(loc=0.0, scale=1.0, size=None)
random.Generator.hypergeometric(ngood, nbad, nsample, size=None)
random.Generator.laplace(loc=0.0, scale=1.0, size=None)
random.Generator.logistic(loc=0.0, scale=1.0, size=None)
random.Generator.lognormal(mean=0.0, sigma=1.0, size=None)
random.Generator.logseries(p, size=None)
random.Generator.multinomial(n, pvals, size=None)
random.Generator.multivariate_hypergeometric(colors, nsample, size=None, method='marginals')
random.Generator.multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)
random.Generator.negative_binomial(n, p, size=None)
random.Generator.noncentral_chisquare(df, nonc, size=None)
random.Generator.noncentral_f(dfnum, dfden, nonc, size=None)
random.Generator.normal(loc=0.0, scale=1.0, size=None)
random.Generator.pareto(a, size=None)
random.Generator.poisson(lam=1.0, size=None)
random.Generator.power(a, size=None)
random.Generator.rayleigh(scale=1.0, size=None)
random.Generator.standard_cauchy(size=None)
random.Generator.standard_exponential(size=None, dtype=np.float64, method='zig', out=None)
random.Generator.standard_gamma(shape, size=None, dtype=np.float64, out=None)
random.Generator.standard_normal(size=None, dtype=np.float64, out=None)
random.Generator.standard_t(df, size=None)
random.Generator.triangular(left, mode, right, size=None)
random.Generator.uniform(low=0.0, high=1.0, size=None)
random.Generator.vonmises(mu, kappa, size=None)
random.Generator.wald(mean, scale, size=None)
random.Generator.weibull(a, size=None)
random.Generator.zipf(a, size=None)
random.RandomState(seed=None)
random.RandomState.get_state()
random.RandomState.set_state(state)
random.RandomState.seed(self, seed=None)
random.RandomState.rand(d0, d1, ..., dn)
random.RandomState.randn(d0, d1, ..., dn)
random.RandomState.randint(low, high=None, size=None, dtype=int)
random.RandomState.random_integers(low, high=None, size=None)
random.RandomState.random_sample(size=None)RandomState.choice(a, size=None, replace=True, p=None)
random.RandomState.bytes(length)
random.RandomState.shuffle(x)
random.RandomState.permutation(x)
random.RandomState.beta(a, b, size=None)
random.RandomState.binomial(n, p, size=None)
random.RandomState.chisquare(df, size=None)
random.RandomState.dirichlet(alpha, size=None)
random.RandomState.exponential(scale=1.0, size=None)
random.RandomState.f(dfnum, dfden, size=None)
random.RandomState.gamma(shape, scale=1.0, size=None)
random.RandomState.geometric(p, size=None)
random.RandomState.gumbel(loc=0.0, scale=1.0, size=None)
random.RandomState.hypergeometric(ngood, nbad, nsample, size=None)
random.RandomState.laplace(loc=0.0, scale=1.0, size=None)
random.RandomState.logistic(loc=0.0, scale=1.0, size=None)
random.RandomState.lognormal(mean=0.0, sigma=1.0, size=None)
random.RandomState.logseries(p, size=None)
random.RandomState.multinomial(n, pvals, size=None)
random.RandomState.multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)
random.RandomState.negative_binomial(n, p, size=None)
random.RandomState.noncentral_chisquare(df, nonc, size=None)
random.RandomState.noncentral_f(dfnum, dfden, nonc, size=None)
random.RandomState.normal(loc=0.0, scale=1.0, size=None)
random.RandomState.pareto(a, size=None)
random.RandomState.poisson(lam=1.0, size=None)
random.RandomState.power(a, size=None)
random.RandomState.rayleigh(scale=1.0, size=None)
random.RandomState.standard_cauchy(size=None)
random.RandomState.standard_exponential(size=None)
random.RandomState.standard_gamma(shape, size=None)
random.RandomState.standard_normal(size=None)
random.RandomState.standard_t(df, size=None)
random.RandomState.triangular(left, mode, right, size=None)
random.RandomState.uniform(low=0.0, high=1.0, size=None)
random.RandomState.vonmises(mu, kappa, size=None)
random.RandomState.wald(mean, scale, size=None)
random.RandomState.weibull(a, size=None)
random.RandomState.zipf(a, size=None)
random.beta(a, b, size=None)
random.binomial(n, p, size=None)
random.bytes(length)
random.chisquare(df, size=None)
random.choice(a, size=None, replace=True, p=None)
random.dirichlet(alpha, size=None)
random.exponential(scale=1.0, size=None)
random.f(dfnum, dfden, size=None)
random.gamma(shape, scale=1.0, size=None)
random.geometric(p, size=None)
random.get_state()
random.gumbel(loc=0.0, scale=1.0, size=None)
random.hypergeometric(ngood, nbad, nsample, size=None)
random.laplace(loc=0.0, scale=1.0, size=None)
random.logistic(loc=0.0, scale=1.0, size=None)
random.lognormal(mean=0.0, sigma=1.0, size=None)
random.logseries(p, size=None)
random.multinomial(n, pvals, size=None)
random.multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)
random.negative_binomial(n, p, size=None)
random.noncentral_chisquare(df, nonc, size=None)
random.noncentral_f(dfnum, dfden, nonc, size=None)
random.normal(loc=0.0, scale=1.0, size=None)
random.pareto(a, size=None)
random.permutation(x)
random.poisson(lam=1.0, size=None)
random.power(a, size=None)
random.rand(d0, d1, ..., dn)
random.randint(low, high=None, size=None, dtype=int)
random.randn(d0, d1, ..., dn)
random.random(size=None)
random.random_integers(low, high=None, size=None)
random.random_sample(size=None)
random.ranf()
random.rayleigh(scale=1.0, size=None)
random.sample()
random.seed(self, seed=None)
random.set_state(state)
random.shuffle(x)
random.standard_cauchy(size=None)
random.standard_exponential(size=None)
random.standard_gamma(shape, size=None)
random.standard_normal(size=None)
random.standard_t(df, size=None)
random.triangular(left, mode, right, size=None)
random.uniform(low=0.0, high=1.0, size=None)
random.vonmises(mu, kappa, size=None)
random.wald(mean, scale, size=None)
random.weibull(a, size=None)
random.zipf(a, size=None)
random.BitGenerator(seed=None)
random.BitGenerator.random_raw(self, size=None)
random.MT19937(seed=None)
random.MT19937.state
random.MT19937.jumped(jumps=1)
random.MT19937.cffi
random.MT19937.ctypes
random.PCG64(seed=None)
random.PCG64.state
random.PCG64.advance(delta)
random.PCG64.jumped(jumps=1)
random.PCG64.cffi
random.PCG64.ctypes
random.Philox(seed=None, counter=None, key=None)
random.Philox.state
random.Philox.advance(delta)
random.Philox.jumped(jumps=1)
random.Philox.cffi
random.Philox.ctypes
random.SFC64(seed=None)
random.SFC64.state
random.SFC64.cffi
random.SFC64.ctypes
random.SeedSequence(entropy=None, *, spawn_key=(), pool_size=4)
random.SeedSequence.generate_state(n_words, dtype=np.uint32)
random.SeedSequence.spawn(n_children)
in1d(ar1, ar2, assume_unique=False, invert=False)
intersect1d(ar1, ar2, assume_unique=False, return_indices=False)
isin(element, test_elements, assume_unique=False, invert=False)
setdiff1d(ar1, ar2, assume_unique=False)
setxor1d(ar1, ar2, assume_unique=False)
union1d(ar1, ar2)
sort(a, axis=-1, kind=None, order=None)
lexsort(keys, axis=-1)
argsort(a, axis=-1, kind=None, order=None)
msort(a)
sort_complex(a)
partition(a, kth, axis=-1, kind='introselect', order=None)
argpartition(a, kth, axis=-1, kind='introselect', order=None)
argmax(a, axis=None, out=None)
nanargmax(a, axis=None)
argmin(a, axis=None, out=None)
nanargmin(a, axis=None)
argwhere(a)
flatnonzero(a)
searchsorted(a, v, side='left', sorter=None)
extract(condition, arr)
count_nonzero(a, axis=None, *, keepdims=False)
amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)
amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)
nanmin(a, axis=None, out=None, keepdims=<no value>)
nanmax(a, axis=None, out=None, keepdims=<no value>)
ptp(a, axis=None, out=None, keepdims=<no value>)
percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)
nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>)
quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)
nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<no value>)
median(a, axis=None, out=None, overwrite_input=False, keepdims=False)
average(a, axis=None, weights=None, returned=False)
mean(a, axis=None, dtype=None, out=None, keepdims=<no value>)
std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)
var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)
nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>)
nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>)
nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)
nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)
corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>)
correlate(a, v, mode='valid')
cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None)
histogram(a, bins=10, range=None, normed=None, weights=None, density=None)
histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None)
histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None)
bincount(x, weights=None, minlength=0)
histogram_bin_edges(a, bins=10, range=None, weights=None)
digitize(x, bins, right=False)
testing.assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True)
testing.assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True)
testing.assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True)
testing.assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True)
testing.assert_array_almost_equal_nulp(x, y, nulp=1)
testing.assert_array_max_ulp(a, b, maxulp=1, dtype=None)
testing.assert_array_equal(x, y, err_msg='', verbose=True)
testing.assert_array_less(x, y, err_msg='', verbose=True)
testing.assert_equal(actual, desired, err_msg='', verbose=True)
testing.assert_raises(exception_class, callable, *args, **kwargs) assert_raises(exception_class)
testing.assert_raises_regex(exception_class, expected_regexp, callable, *args, **kwargs) assert_raises_regex(exception_class, expected_regexp)
testing.assert_warns(warning_class, *args, **kwargs)
testing.assert_string_equal(actual, desired)
testing.dec.deprecated(conditional=True)
testing.dec.knownfailureif(fail_condition, msg=None)
testing.dec.setastest(tf=True)
testing.dec.skipif(skip_condition, msg=None)
testing.dec.slow(t)
testing.decorate_methods(cls, decorator, testmatch=None)
testing.Tester
testing.run_module_suite(file_to_run=None, argv=None)
testing.rundocs(filename=None, raise_on_error=True)
testing.suppress_warnings(forwarding_rule='always'
testing.suppress_warnings.__call__(self, func)suppress_warnings.filter(self, category=<class 'Warning'>, message='', module=None)
testing.suppress_warnings.record(self, category=<class 'Warning'>, message='', module=None)
bartlett(M)
blackman(M)
hamming(M)
hanning(M)
kaiser(M, beta)
distutils.misc_util.get_np_include_dirs()
distutils.misc_util.default_config_dict(name=None, parent_name=None, local_path=None)
distutils.misc_util.dict_append(d, **kws)
distutils.misc_util.appendpath(prefix, path)
distutils.misc_util.generate_config_py(target)
distutils.misc_util.get_cmd(cmdname, _cache={})
distutils.misc_util.allpath(name)
distutils.misc_util.get_mathlibs(path=None)
distutils.misc_util.terminal_has_colors()
distutils.misc_util.red_text(s)
distutils.misc_util.green_text(s)
distutils.misc_util.yellow_text(s)
distutils.misc_util.blue_text(s)
distutils.misc_util.cyan_text(s)
distutils.misc_util.cyg2win32(path)
distutils.misc_util.mingw32()
distutils.misc_util.all_strings(lst)
distutils.misc_util.has_f_sources(sources)
distutils.misc_util.has_cxx_sources(sources)
distutils.misc_util.filter_sources(sources)
distutils.misc_util.get_dependencies(sources)
distutils.misc_util.is_local_src_dir(directory)
distutils.misc_util.get_ext_source_files(ext)
distutils.misc_util.get_script_files(scripts)
distutils.misc_util.get_lib_source_files(lib)
distutils.misc_util.get_data_files(data)
distutils.misc_util.dot_join(*args)
distutils.misc_util.get_frame(level=0)
distutils.misc_util.minrelpath(path)
distutils.misc_util.njoin(*path)
distutils.misc_util.is_sequence(seq)
distutils.misc_util.is_string(s)
distutils.misc_util.as_list(seq)
distutils.misc_util.gpaths(paths, local_path='', include_non_existing=True)
distutils.misc_util.get_language(sources)
distutils.misc_util.quote_args(args)
distutils.misc_util.get_build_architecture()
distutils.misc_util.get_info(pkgname, dirs=None)
distutils.misc_util.get_num_build_jobs()
distutils.cpuinfo.cpu = <np.distutils.cpuinfo.LinuxCPUInfo object>
distutils.core.Extension(name, sources, include_dirs=None, define_macros=None, undef_macros=None, library_dirs=None, libraries=None, runtime_library_dirs=None, extra_objects=None, extra_compile_args=None, extra_link_args=None, export_symbols=None, swig_opts=None, depends=None, language=None, f2py_options=None, module_dirs=None, extra_f77_compile_args=None, extra_f90_compile_args=None)
distutils.exec_command
distutils.log.set_verbosity(v, force=False)
distutils.system_info.get_info(name, notfound_action=0)
distutils.system_info.get_standard_file(fname)
